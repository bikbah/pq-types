package pq_types

import (
	. "gopkg.in/check.v1"
)

func (s *TypesSuite) TestPoint(c *C) {
	a := new(Point)

	b := []byte{
		0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x45, 0x36,
		0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x34, 0x36, 0x45, 0x38, 0x36,
		0x31, 0x42, 0x46, 0x30, 0x43, 0x44, 0x34, 0x32, 0x34, 0x30, 0x32, 0x31,
		0x39, 0x34, 0x46, 0x37, 0x37, 0x31, 0x33, 0x34, 0x45, 0x39, 0x34, 0x42,
		0x34, 0x30,
	}
	c.Check(a.Scan(b), IsNil)
	c.Check(a, DeepEquals, &Point{Lon: 37.6088900, Lat: 55.8219130})
	v, err := a.Value()
	c.Check(err, IsNil)
	c.Check(v, DeepEquals, []byte(`SRID=4326;POINT(37.6088900 55.8219130)`))
}

func (s *TypesSuite) TestPointDB(c *C) {
	if s.skipPostGIS {
		c.Skip("PostGIS not available")
	}

	var (
		err error
		p1  Point
	)

	for _, p := range []Point{
		{Lon: 37.6088900, Lat: 55.8219130},
		{Lon: -37.6088900, Lat: -55.8219130},
		{Lon: 0, Lat: 0},
		{Lon: 0.00, Lat: 0.0},
	} {
		s.SetUpTest(c)

		_, err = s.db.Exec("INSERT INTO pq_types (point) VALUES($1)", p)
		c.Check(err, IsNil)

		err = s.db.QueryRow("SELECT point FROM pq_types").Scan(&p1)
		c.Check(err, IsNil)

		c.Check(p1, DeepEquals, p)
	}
}

func (s *TypesSuite) TestBox2D(c *C) {
	a := new(Box2D)

	b := []byte{
		0x42, 0x4f, 0x58, 0x28, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x20, 0x30, 0x2e, 0x32,
		0x35, 0x2c, 0x30, 0x2e, 0x35, 0x20, 0x31, 0x29,
	}
	c.Check(a.Scan(b), IsNil)
	c.Check(a, DeepEquals, &Box2D{Min: Point{Lon: 0.125, Lat: 0.25}, Max: Point{Lon: 0.5, Lat: 1}})
	v, err := a.Value()
	c.Check(err, IsNil)
	c.Check(v, DeepEquals, []byte(`BOX(0.1250000 0.2500000,0.5000000 1.0000000)`))
}

func (s *TypesSuite) TestBoxDB(c *C) {
	if s.skipPostGIS {
		c.Skip("PostGIS not available")
	}

	var (
		err  error
		box1 Box2D
	)

	for _, box := range []Box2D{
		{Min: Point{Lon: 0.125, Lat: 0.25}, Max: Point{Lon: 0.5, Lat: 1}},
		{Min: Point{Lon: -0.125, Lat: -0.25}, Max: Point{Lon: 0.5, Lat: 1}},
		{Min: Point{Lon: -0.55, Lat: -0.55}, Max: Point{Lon: 0.5, Lat: 1}},
	} {
		s.SetUpTest(c)

		_, err = s.db.Exec("INSERT INTO pq_types (box) VALUES($1)", box)
		c.Check(err, IsNil)

		err = s.db.QueryRow("SELECT box FROM pq_types").Scan(&box1)
		c.Check(err, IsNil)

		c.Check(box1, DeepEquals, box)
	}
}

func (s *TypesSuite) TestPolygon(c *C) {
	a := new(Polygon)

	b := []byte{
		0x30, 0x31, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x45, 0x36, 0x31, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x43, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x43, 0x30, 0x33, 0x46, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x30, 0x33, 0x46,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x45, 0x30,
		0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x46, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x45, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x43, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x44, 0x30, 0x33, 0x46}
	c.Check(a.Scan(b), IsNil)
	c.Check(a, DeepEquals, &Polygon{
		Points: []Point{
			{Lon: 0.125, Lat: 0.25},
			{Lon: 0.125, Lat: 1},
			{Lon: 0.5, Lat: 1},
			{Lon: 0.5, Lat: 0.25},
			{Lon: 0.125, Lat: 0.25}}})
	v, err := a.Value()
	c.Check(err, IsNil)
	c.Check(v, DeepEquals, []byte(`SRID=4326;POLYGON((0.1250000 0.2500000,0.1250000 1.0000000,0.5000000 1.0000000,0.5000000 0.2500000,0.1250000 0.2500000))`))
}

func (s *TypesSuite) TestPolygonDB(c *C) {
	if s.skipPostGIS {
		c.Skip("PostGIS not available")
	}

	var (
		err  error
		pol1 Polygon
	)

	for _, pol := range []Polygon{
		{
			Points: []Point{
				{Lon: 0.125, Lat: 0.25},
				{Lon: 0.125, Lat: 1},
				{Lon: 0.5, Lat: 1},
				{Lon: 0.5, Lat: 0.25},
				{Lon: 0.125, Lat: 0.25}}},
		{
			Points: []Point{
				{Lon: 0.0, Lat: 0.0},
				{Lon: -50.555, Lat: -50.555},
				{Lon: -50, Lat: 0},
				{Lon: 0, Lat: 0}}},
	} {
		s.SetUpTest(c)

		_, err = s.db.Exec("INSERT INTO pq_types (polygon) VALUES($1)", pol)
		c.Check(err, IsNil)

		err = s.db.QueryRow("SELECT polygon FROM pq_types").Scan(&pol1)
		c.Check(err, IsNil)

		c.Check(pol1, DeepEquals, pol)
	}
}
